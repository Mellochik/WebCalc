import streamlit as st
import pandas as pd
import math


class Selection:
    def __init__(self, data):
        self.data = data
        self.numbers = []
        self.x_max = 0
        self.x_min = 0
        self.x_start = 0
        self.x_end = 0
        self.table = {}
        self.R = 0
        self.k = 0
        self.m = 0
        self.X = 0
        self.S = 0
        self.d = 0
        self.Mo = 0
        self.Me = 0
        self.A = 0
        self.E = 0

    def calculate(self):
        # –ß–∏—Å–ª–∞ –≤—ã–±–æ—Ä–∫–∏
        self.numbers = list(map(float, self.data.split()))

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª
        length = len(self.numbers)

        # –ú–∞–∫—Å –∏ –º–∏–Ω
        self.x_max = max(self.numbers)
        self.x_min = min(self.numbers)

        # –†–∞–∑–º–∞—Ö
        self.R = self.x_max - self.x_min

        # –ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        self.k = math.ceil(1 + 3.322 * math.log10(length))

        # –®–∞–≥
        self.m = math.ceil(self.R / self.k)

        # –ù–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
        self.x_start = round(self.x_min - self.m / 2, 1)
        self.x_end = round(self.x_max + self.m / 2, 1)

        # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã
        self.table = {'x_i': []}
        t = self.x_start
        while t < self.x_end:
            self.table['x_i'].append((t, t + self.m))
            t += self.m

        # –ß–∞—Å—Ç–æ—Ç–∞
        self.table['n_i'] = [0 for _ in range(len(self.table['x_i']))]
        for item in self.numbers:
            for index, value in enumerate(self.table['x_i']):
                if value[0] < item <= value[1]:
                    self.table['n_i'][index] += 1
                    break

        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
        self.table['w_i'] = []
        for value in self.table['n_i']:
            self.table['w_i'].append(value / length)

        # –ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è
        t = self.table['n_i'][0]
        self.table['n*_i'] = [t]
        for value in self.table['n_i'][1:]:
            t += value
            self.table['n*_i'].append(t)

        # –°–µ—Ä–µ–¥–∏–Ω–∞ –æ—Ç—Ä–µ–∑–∫–∞
        self.table['x_middle'] = []
        for value in self.table['x_i']:
            self.table['x_middle'].append((value[0] + value[1]) / 2)

        # –°–µ—Ä–µ–¥–∏–Ω–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ
        self.table['x^2'] = []
        for value in self.table['x_middle']:
            self.table['x^2'].append(math.pow(value, 2))

        # –•—Ä–∏—Å—Ç–æ—Å –≤–æ—Å–∫—Ä–µ—Å
        for x, n in zip(self.table['x_middle'], self.table['n_i']):
            self.X += x * n
        self.X /= length

        # –î–∏—Å–ø–µ—Ä—Å–∏—è
        for x, n in zip(self.table['x^2'], self.table['n_i']):
            self.S += x * n
        self.S /= length
        self.S -= self.X * self.X

        # –°—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        self.d = math.sqrt(self.S)

        # –ú–æ–¥–∞
        index = self.table['n_i'].index(max(self.table['n_i']))
        alpha = self.table['x_i'][index][0]
        self.Mo = alpha + self.m * (self.table['n_i'][index] - self.table['n_i'][index - 1]) / \
                  ((self.table['n_i'][index] - self.table['n_i'][index - 1]) + (
                          self.table['n_i'][index] - self.table['n_i'][index + 1]))

        # –ú–µ–¥–∏–∞–Ω–∞
        index = 0
        for i in range(1, len(self.table['n*_i'])):
            if length / 2 <= self.table['n*_i'][i]:
                index = i
                break
        alpha = self.table['x_i'][index][0]
        self.Me = alpha + self.m * (length / 2 - self.table['n*_i'][index - 1]) / self.table['n_i'][index]

        # –ö—É–± —Ä–∞–∑–Ω–æ—Å—Ç–∏
        self.table['(x-X)^3'] = []
        for value in self.table['x_middle']:
            self.table['(x-X)^3'].append(math.pow(value - self.X, 3))

        # –ê—Å—Å–∏–º–µ—Ç—Ä–∏—è
        for x, n in zip(self.table['(x-X)^3'], self.table['n_i']):
            self.A += x * n
        self.A /= length * math.pow(self.d, 3)

        # –†–∞–∑–Ω–æ—Å—Ç—å –≤ 4 —Å—Ç–µ–ø–µ–Ω–∏
        self.table['(x-X)^4'] = []
        for value in self.table['x_middle']:
            self.table['(x-X)^4'].append(math.pow(value - self.X, 4))

        # –≠–∫—Å—Ü–µ—Å—Å
        for x, n in zip(self.table['(x-X)^4'], self.table['n_i']):
            self.E += x * n
        self.E /= length * math.pow(self.d, 4)
        self.E -= 3


st.header("üìä–ú–∞—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
st.subheader("–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞")
st.caption("–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã —Å—Ç—Ä–æ—è—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∫–∏, –∞ —á–∞—Å—Ç–æ—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º")

data = st.text_input("Selection")

if data:
    selection = Selection(data)
    selection.calculate()

    st.text(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ {len(selection.numbers)}\n"
            f"–ú–∏–Ω–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ x_min = {selection.x_min}\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ x_max = {selection.x_max}\n"
            f"–†–∞–∑–º–∞—Ö R={selection.R}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ k = {selection.k}\n"
            f"–®–∞–≥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ m = {selection.m}\n"
            f"–ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ x_start = {selection.x_start}\n"
            f"–ö–æ–Ω–µ—Ü –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ x_end = {selection.x_end}\n")

    st.dataframe(selection.table)

    st.text(f"–í—ã–±–æ—Ä–æ—á–Ω–∞—è —Å—Ä–µ–¥–Ω—è X_–≤ = {selection.X}\n"
            f"–î–∏—Å–ø–µ—Ä—Å–∏—è S^2 = {selection.S}\n"
            f"–°—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ d = {selection.d}\n"
            f"–ú–æ–¥–∞ –ú–æ = {selection.Mo}\n"
            f"–ú–µ–¥–∏–∞–Ω–∞ –ú–µ = {selection.Me}\n"
            f"–ê—Å–∏–º–º–µ—Ç—Ä–∏—è –ê = {selection.A}\n"
            f"–≠–∫—Å—Ü–µ—Å—Å E = {selection.E}")
